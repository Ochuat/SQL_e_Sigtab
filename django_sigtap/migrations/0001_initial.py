# Generated by Django 2.0.4 on 2018-07-23 18:39

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cid',
            fields=[
                ('co_cid', models.CharField(help_text='Código que identifica o CID-10', max_length=4, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_cid', models.CharField(help_text='Nome da doença', max_length=100, verbose_name='Descrição')),
                ('tp_agravo', models.CharField(choices=[('0', 'Sem Agravo'), ('1', 'Agravo de notificação'), ('2', 'Agravo de bloqueio')], help_text='Define o tipo de agravo que deve ser notificado', max_length=1, verbose_name='Agravo')),
                ('tp_sexo', models.CharField(choices=[('M', 'Masculino'), ('F', 'Feminino'), ('I', 'Indiferente/Ambos')], help_text='Define a abrangência de sexo para a doença', max_length=1, verbose_name='Sexo')),
                ('tp_estadio', models.CharField(choices=[('S', 'Sim'), ('N', 'Não')], help_text='Diz se o cid é ou não estadiável', max_length=1, verbose_name='Estadio')),
                ('vl_campos_irradiados', models.PositiveIntegerField(verbose_name='Campos Irradiados')),
            ],
            options={
                'db_table': 'tb_cid',
                'ordering': ['co_cid'],
            },
        ),
        migrations.CreateModel(
            name='ComponenteRede',
            fields=[
                ('co_componente_rede', models.CharField(help_text='Código', max_length=10, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_componente_rede', models.CharField(help_text='Descrição', max_length=150, verbose_name='Código')),
                ('co_rede_atencao', models.CharField(max_length=3, verbose_name='Descrição')),
            ],
            options={
                'db_table': 'tb_componente_rede',
                'ordering': ['co_componente_rede'],
            },
        ),
        migrations.CreateModel(
            name='Descricao',
            fields=[
                ('co_procedimento', models.CharField(help_text='Código do procedimento', max_length=10, primary_key=True, serialize=False, verbose_name='Código')),
                ('ds_procedimento', models.TextField(help_text='Descrição do procedimento', verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_descricao',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='DescricaoDetalhe',
            fields=[
                ('co_detalhe', models.CharField(help_text='Código do detalhe', max_length=3, primary_key=True, serialize=False, verbose_name='Código')),
                ('ds_detalhe', models.TextField(help_text='Descrição do detalhe', verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_descricao_detalhe',
                'ordering': ['co_detalhe'],
            },
        ),
        migrations.CreateModel(
            name='Detalhe',
            fields=[
                ('co_detalhe', models.CharField(help_text='Código que identifica os atributos de detalhes de um procedimento', max_length=3, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_detalhe', models.CharField(help_text='Nome que descreve os atributos de detalhes de um procedimento', max_length=100, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_detalhe',
                'ordering': ['co_detalhe'],
            },
        ),
        migrations.CreateModel(
            name='ExcecaoCompatibilidade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tp_compatibilidade', models.CharField(help_text='Tipo de Compatibilidade', max_length=1, verbose_name='Tipo Compatibilidade')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'rl_excecao_compatibilidade',
                'ordering': ['co_procedimento_restricao'],
            },
        ),
        migrations.CreateModel(
            name='Financiamento',
            fields=[
                ('co_financiamento', models.CharField(help_text='Código que identifica os tipos de financiamento de um procedimento', max_length=2, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_financiamento', models.CharField(help_text='Nome que descreve os tipos de financiamento de um procedimento', max_length=100, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_financiamento',
                'ordering': ['co_financiamento'],
            },
        ),
        migrations.CreateModel(
            name='FormaOrganizacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_forma_organizacao', models.CharField(help_text='Código  da forma de organização dos procedimentos', max_length=2, verbose_name='Código')),
                ('no_forma_organizacao', models.CharField(help_text='Nome  da forma de organização dos procedimentos', max_length=100, verbose_name='Descrição')),
                ('co_sub_grupo', models.CharField(db_column='co_sub_grupo', help_text='Código do sub-grupo dos procedimentos', max_length=2, verbose_name='Sub Grupo')),
                ('co_grupo', models.CharField(db_column='co_grupo', help_text='Código do grupo dos procedimentos', max_length=2, verbose_name='Grupo')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_forma_organizacao',
                'ordering': ['co_grupo', 'co_sub_grupo', 'co_forma_organizacao'],
            },
        ),
        migrations.CreateModel(
            name='Grupo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_grupo', models.CharField(help_text='Código do grupo dos procedimentos', max_length=2, verbose_name='Código')),
                ('no_grupo', models.CharField(help_text='Nome do grupo dos procedimentos', max_length=100, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_grupo',
                'ordering': ['co_grupo'],
            },
        ),
        migrations.CreateModel(
            name='GrupoHabilitacao',
            fields=[
                ('nu_grupo_habilitacao', models.CharField(help_text='Código do grupo de habilitação', max_length=4, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_grupo_habilitacao', models.CharField(help_text='Nome (curto) do grupo de habilitação', max_length=20, verbose_name='Nome Curto')),
                ('ds_grupo_habilitacao', models.CharField(help_text='Descrição (longa) do grupo de habilitação', max_length=25, verbose_name='Descrição')),
            ],
            options={
                'db_table': 'tb_grupo_habilitacao',
                'ordering': ['nu_grupo_habilitacao'],
            },
        ),
        migrations.CreateModel(
            name='Habilitacao',
            fields=[
                ('co_habilitacao', models.CharField(help_text='Código que identifica uma habilitação para o CNES', max_length=4, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_habilitacao', models.CharField(help_text='Nome de uma habilitação', max_length=150, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_habilitacao',
                'ordering': ['co_habilitacao'],
            },
        ),
        migrations.CreateModel(
            name='Modalidade',
            fields=[
                ('co_modalidade', models.CharField(help_text='Código da Modalidade', max_length=2, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_modalidade', models.CharField(help_text='Nome da Modalidade', max_length=100, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_modalidade',
                'ordering': ['co_modalidade'],
            },
        ),
        migrations.CreateModel(
            name='Ocupacao',
            fields=[
                ('co_ocupacao', models.CharField(help_text='Código que identifica a classificação das ocupações definidas pela CBO-2002', max_length=6, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_ocupacao', models.CharField(help_text='Nome das ocupações definidas pela CBO-2002', max_length=150, verbose_name='Descrição')),
            ],
            options={
                'db_table': 'tb_ocupacao',
                'ordering': ['co_ocupacao'],
            },
        ),
        migrations.CreateModel(
            name='Procedimento',
            fields=[
                ('co_procedimento', models.CharField(help_text='Código do procedimento', max_length=10, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_procedimento', models.CharField(help_text='Nome descritivo do procedimento', max_length=250, verbose_name='Descrição')),
                ('tp_complexidade', models.CharField(choices=[('0', 'Não se aplica'), ('1', 'Atenção Básica Complexidade'), ('2', 'Média Complexidade'), ('3', 'Alta Complexidade')], help_text='Define a complexidade do procedimento', max_length=1, verbose_name='Complexidade')),
                ('tp_sexo', models.CharField(choices=[('M', 'Masculino'), ('F', 'Feminino'), ('I', 'Indiferente/Ambos'), ('N', 'Não se aplica')], help_text='Define a abrangência de sexo para a aplicação do procedimento', max_length=1, verbose_name='Sexo')),
                ('qt_maxima_execucao', models.PositiveIntegerField(help_text='Número máximo de execuções permitidas', verbose_name='Qtd Maxima Execução')),
                ('qt_dias_permanencia', models.PositiveIntegerField(help_text='Número máximo de dias de internações possíveis', verbose_name='Qtd Dias Permanência')),
                ('qt_pontos', models.PositiveIntegerField(help_text='Quantidade de pontos para o procedimento', verbose_name='Qtd Pontos')),
                ('vl_idade_minima', models.PositiveIntegerField(help_text='Idade mínima para o uso um procedimento em meses', verbose_name='Idade Mínima')),
                ('vl_idade_maxima', models.PositiveIntegerField(help_text='Idade máxima para o uso um procedimento em meses', verbose_name='Idade Máxima')),
                ('vl_sh', models.DecimalField(decimal_places=2, help_text='Valor pago para o serviço hospitalar deste procedimento', max_digits=8, verbose_name='Valor Hospitalar')),
                ('vl_sa', models.DecimalField(decimal_places=2, help_text='Valor pago para o serviço ambulatorial deste procedimento', max_digits=8, verbose_name='Valor Ambulatorial')),
                ('vl_sp', models.DecimalField(decimal_places=2, help_text='Valor pago para o serviço profissional deste procedimento', max_digits=8, verbose_name='Valor Profissional')),
                ('co_financiamento', models.CharField(help_text='Código que identifica os tipos de financiamento de um procedimento', max_length=2, verbose_name='Financiamento')),
                ('co_rubrica', models.CharField(help_text='Código que identifica as rubricas', max_length=6, verbose_name='Descrição')),
                ('qt_tempo_permanencia', models.PositiveIntegerField(help_text='Tempo de Permanência', verbose_name='Tempo de Permanência')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_procedimento',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoCid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('st_principal', models.CharField(max_length=1, verbose_name='Principal')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_cid', models.ForeignKey(db_column='co_cid', help_text='Código do CID', on_delete=django.db.models.deletion.CASCADE, to='procsus.Cid')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_cid',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoCompativel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tp_compatibilidade', models.CharField(max_length=1, verbose_name='Tipo Compatibilidade')),
                ('qt_permitida', models.PositiveIntegerField(verbose_name='Qtd Permitida')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_procedimento_compativel', models.ForeignKey(db_column='co_procedimento_compativel', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, related_name='procedimento_compativel_comp', to='procsus.Procedimento')),
                ('co_procedimento_principal', models.ForeignKey(db_column='co_procedimento_principal', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, related_name='procedimento_principal_comp', to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_compativel',
                'ordering': ['co_procedimento_principal'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoComponenteRede',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_componente_rede', models.ForeignKey(db_column='co_componente_rede', help_text='Código do CID', on_delete=django.db.models.deletion.CASCADE, to='procsus.ComponenteRede')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_comp_rede',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoDetalhe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_detalhe', models.ForeignKey(db_column='co_detalhe', help_text='Código do CID', on_delete=django.db.models.deletion.CASCADE, to='procsus.Detalhe')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_detalhe',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoHabilitacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_habilitacao', models.ForeignKey(db_column='co_habilitacao', help_text='Código da Habilitação', on_delete=django.db.models.deletion.CASCADE, to='procsus.Habilitacao')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
                ('nu_grupo_habilitacao', models.ForeignKey(db_column='nu_grupo_habilitacao', help_text='Código do grupo de habilitação', on_delete=django.db.models.deletion.CASCADE, to='procsus.GrupoHabilitacao')),
            ],
            options={
                'db_table': 'rl_procedimento_habilitacao',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoIncremento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vl_percentual_sh', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentual Hospitalar')),
                ('vl_percentual_sa', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentual Ambulatorial')),
                ('vl_percentual_sp', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentual Profissional')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_habilitacao', models.ForeignKey(db_column='co_habilitacao', help_text='Código da Habilitação', on_delete=django.db.models.deletion.CASCADE, to='procsus.Habilitacao')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_incremento',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoModalidade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_modalidade', models.ForeignKey(db_column='co_modalidade', help_text='Código da Modalidade', on_delete=django.db.models.deletion.CASCADE, to='procsus.Modalidade')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_modalidade',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoOcupacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_ocupacao', models.ForeignKey(db_column='co_ocupacao', help_text='Código que identifica a classificação das ocupações definidas pela CBO-2002', on_delete=django.db.models.deletion.CASCADE, to='procsus.Ocupacao')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_ocupacao',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoOrigem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
                ('co_procedimento_origem', models.ForeignKey(db_column='co_procedimento_origem', help_text='Código do PRocedimento Origem', on_delete=django.db.models.deletion.CASCADE, related_name='procedimento_origem', to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_origem',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoRegistro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_registro',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoRegraCondicionada',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código doprocedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_regra_cond',
                'ordering': ['co_regra_condicionada'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoRenases',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_renases',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoServico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_classificacao', models.CharField(help_text='Código que identifica os serviços', max_length=3, verbose_name='Código')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_servico',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoSiaSih',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tp_procedimento', models.CharField(choices=[('A', 'Ambulatorial'), ('H', 'Hospitalar')], help_text='Define qual era o tipo do procedimento SAI e/ou SIH de origem do novo procedimento', max_length=1, verbose_name='Tipo')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código doprocedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_sia_sih',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoTipoLeito',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_leito',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='ProcedimentoTuss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_procedimento', models.ForeignKey(db_column='co_procedimento', help_text='Código do procedimento', on_delete=django.db.models.deletion.CASCADE, to='procsus.Procedimento')),
            ],
            options={
                'db_table': 'rl_procedimento_tuss',
                'ordering': ['co_procedimento'],
            },
        ),
        migrations.CreateModel(
            name='RedeAtencao',
            fields=[
                ('co_rede_atencao', models.CharField(help_text='Código', max_length=3, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_rede_atencao', models.CharField(help_text='Descrição', max_length=50, verbose_name='Código')),
            ],
            options={
                'db_table': 'tb_rede_atencao',
                'ordering': ['co_rede_atencao'],
            },
        ),
        migrations.CreateModel(
            name='Registro',
            fields=[
                ('co_registro', models.CharField(help_text='Código do instrumento de registro do procedimento', max_length=2, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_registro', models.CharField(help_text='Nome do instrumento de registro do procedimento', max_length=50, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_registro',
                'ordering': ['co_registro'],
            },
        ),
        migrations.CreateModel(
            name='RegraCondicionada',
            fields=[
                ('co_regra_condicionada', models.CharField(help_text='Código da regra condicionada', max_length=4, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_regra_condicionada', models.CharField(help_text='Nome da regra condicionada', max_length=150, verbose_name='Código')),
                ('ds_regra_condicionada', models.TextField(help_text='Descrição da regra condicionada', verbose_name='Descrição')),
            ],
            options={
                'db_table': 'tb_regra_condicionada',
                'ordering': ['co_regra_condicionada'],
            },
        ),
        migrations.CreateModel(
            name='Renases',
            fields=[
                ('co_renases', models.CharField(help_text='Código', max_length=10, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_renases', models.CharField(help_text='Descrição', max_length=150, verbose_name='Código')),
            ],
            options={
                'db_table': 'tb_renases',
                'ordering': ['co_renases'],
            },
        ),
        migrations.CreateModel(
            name='Rubrica',
            fields=[
                ('co_rubrica', models.CharField(help_text='Código que identifica as rubricas. As duas primeiras posições identifica o código de financiamento', max_length=6, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_rubrica', models.CharField(help_text='Nome das rubricas.', max_length=100, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_rubrica',
                'ordering': ['co_rubrica'],
            },
        ),
        migrations.CreateModel(
            name='Servico',
            fields=[
                ('co_servico', models.CharField(help_text='Código que identifica os serviços', max_length=3, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_servico', models.CharField(help_text='Nome que descreve os serviços', max_length=120, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_servico',
                'ordering': ['co_servico'],
            },
        ),
        migrations.CreateModel(
            name='ServicoClassificacao',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_classificacao', models.CharField(help_text='Código que identifica os serviços', max_length=3, verbose_name='Código')),
                ('no_classificacao', models.CharField(help_text='Nome que descreve a classificação de um serviço', max_length=150, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
                ('co_servico', models.ForeignKey(db_column='co_servico', help_text='Código que identifica a classificação de um serviço', on_delete=django.db.models.deletion.CASCADE, to='procsus.Servico')),
            ],
            options={
                'db_table': 'tb_servico_classificacao',
                'ordering': ['co_classificacao'],
            },
        ),
        migrations.CreateModel(
            name='SiaSih',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_procedimento_sia_sih', models.CharField(help_text='Código que identifica os procedimento do SAI e SIH na data de vigência da nova tabela', max_length=10, verbose_name='Código')),
                ('no_procedimento_sia_sih', models.CharField(help_text='Nome dos procedimento do SAI e SIH na data de vigência da nova tabela', max_length=100, verbose_name='Descrição')),
                ('tp_procedimento', models.CharField(choices=[('A', 'Ambulatorial'), ('H', 'Hospitalar')], help_text='Define qual era o tipo do procedimento SAI e/ou SIH de origem do novo procedimento', max_length=1, verbose_name='Tipo')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_sia_sih',
                'ordering': ['co_procedimento_sia_sih'],
            },
        ),
        migrations.CreateModel(
            name='SubGrupo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_sub_grupo', models.CharField(help_text='Código do sub-grupo dos procedimentos', max_length=2, verbose_name='Código')),
                ('no_sub_grupo', models.CharField(help_text='Nome do sub-grupo dos procedimentos', max_length=100, verbose_name='Descrição')),
                ('co_grupo', models.CharField(db_column='co_grupo', help_text='Código do grupo dos procedimentos', max_length=2, verbose_name='Grupo')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_sub_grupo',
                'ordering': ['co_grupo', 'co_sub_grupo'],
            },
        ),
        migrations.CreateModel(
            name='TipoLeito',
            fields=[
                ('co_tipo_leito', models.CharField(help_text='Código da classificação de leito', max_length=2, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_tipo_leito', models.CharField(help_text='Nome da classificação de leito.', max_length=60, verbose_name='Descrição')),
                ('dt_competencia', models.CharField(help_text='Data que informa a competência de validade deste registro', max_length=6, verbose_name='Competência')),
            ],
            options={
                'db_table': 'tb_tipo_leito',
                'ordering': ['co_tipo_leito'],
            },
        ),
        migrations.CreateModel(
            name='Tuss',
            fields=[
                ('co_tuss', models.CharField(help_text='Código', max_length=10, primary_key=True, serialize=False, verbose_name='Código')),
                ('no_tuss', models.CharField(help_text='Descrição do procedimento TUSS', max_length=150, verbose_name='Código')),
            ],
            options={
                'db_table': 'tb_tuss',
                'ordering': ['co_tuss'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='subgrupo',
            unique_together={('co_grupo', 'co_sub_grupo')},
        ),
        migrations.AddField(
            model_name='procedimentotuss',
            name='co_tuss',
            field=models.ForeignKey(db_column='co_tuss', help_text='Código do Procedimento Tuss', on_delete=django.db.models.deletion.CASCADE, to='procsus.Tuss'),
        ),
        migrations.AddField(
            model_name='procedimentotipoleito',
            name='co_tipo_leito',
            field=models.ForeignKey(db_column='co_tipo_leito', help_text='Código do Tipo de Leito', on_delete=django.db.models.deletion.CASCADE, to='procsus.TipoLeito'),
        ),
        migrations.AddField(
            model_name='procedimentosiasih',
            name='co_procedimento_sia_sih',
            field=models.ForeignKey(db_column='co_procedimento_sia_sih', help_text='Código que identifica o procedimento do SAI e SIH que deu origem ao novo procedimento da tabela unificada', on_delete=django.db.models.deletion.CASCADE, to='procsus.SiaSih'),
        ),
        migrations.AddField(
            model_name='procedimentoservico',
            name='co_servico',
            field=models.ForeignKey(db_column='co_servico', help_text='Código do Serviço', on_delete=django.db.models.deletion.CASCADE, to='procsus.Servico'),
        ),
        migrations.AddField(
            model_name='procedimentorenases',
            name='co_renases',
            field=models.ForeignKey(db_column='co_renases', help_text='Código do Renases', on_delete=django.db.models.deletion.CASCADE, to='procsus.Renases'),
        ),
        migrations.AddField(
            model_name='procedimentoregracondicionada',
            name='co_regra_condicionada',
            field=models.ForeignKey(db_column='co_regra_condicionada', help_text='Código da regra condicionada', on_delete=django.db.models.deletion.CASCADE, to='procsus.RegraCondicionada'),
        ),
        migrations.AddField(
            model_name='procedimentoregistro',
            name='co_registro',
            field=models.ForeignKey(db_column='co_registro', help_text='Código do Tipo de Registro', on_delete=django.db.models.deletion.CASCADE, to='procsus.Registro'),
        ),
        migrations.AddField(
            model_name='procedimentocompativel',
            name='co_registro_compativel',
            field=models.ForeignKey(db_column='co_registro_compativel', help_text='Código do Tipo de Registro', on_delete=django.db.models.deletion.CASCADE, related_name='registro_compativel_comp', to='procsus.Registro'),
        ),
        migrations.AddField(
            model_name='procedimentocompativel',
            name='co_registro_principal',
            field=models.ForeignKey(db_column='co_registro_principal', help_text='Código do Tipo de Registro', on_delete=django.db.models.deletion.CASCADE, related_name='registro_principal_comp', to='procsus.Registro'),
        ),
        migrations.AlterUniqueTogether(
            name='formaorganizacao',
            unique_together={('co_grupo', 'co_sub_grupo', 'co_forma_organizacao')},
        ),
        migrations.AddField(
            model_name='excecaocompatibilidade',
            name='co_procedimento_compativel',
            field=models.ForeignKey(db_column='co_procedimento_compativel', help_text='Código doprocedimento', on_delete=django.db.models.deletion.CASCADE, related_name='procedimento_compativel', to='procsus.Procedimento'),
        ),
        migrations.AddField(
            model_name='excecaocompatibilidade',
            name='co_procedimento_principal',
            field=models.ForeignKey(db_column='co_procedimento_principal', help_text='Código doprocedimento', on_delete=django.db.models.deletion.CASCADE, related_name='procedimento_principal', to='procsus.Procedimento'),
        ),
        migrations.AddField(
            model_name='excecaocompatibilidade',
            name='co_procedimento_restricao',
            field=models.ForeignKey(db_column='co_procedimento_restricao', help_text='Código doprocedimento', on_delete=django.db.models.deletion.CASCADE, related_name='procedimento_restricao', to='procsus.Procedimento'),
        ),
        migrations.AddField(
            model_name='excecaocompatibilidade',
            name='co_registro_compativel',
            field=models.ForeignKey(db_column='co_registro_compativel', help_text='Registro Compatível', on_delete=django.db.models.deletion.CASCADE, related_name='registro_compativel', to='procsus.Registro'),
        ),
        migrations.AddField(
            model_name='excecaocompatibilidade',
            name='co_registro_principal',
            field=models.ForeignKey(db_column='co_registro_principal', help_text='Registro Principal', on_delete=django.db.models.deletion.CASCADE, related_name='registro_principal', to='procsus.Registro'),
        ),
    ]
